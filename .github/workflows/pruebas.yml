name: Pruebas

# Evento para que se deployee cuando se hace el push
# on:
#   push:
#     branches:
#       - main

# Este evento es para que solo se deployee si se lo digo manualmente
on:
  workflow_dispatch:

jobs:
  # Job para desplegar infraestructura de Terraform
  despliegue:
    runs-on: ubuntu-latest
    
    outputs:
      bucket_nombre: ${{ steps.capturar_bucket.outputs.bucket_nombre }}
      ecr_repository_uri_url: ${{ steps.capturar_ecr_uri_url.outputs.ecr_repository_uri_url }}
      ecr_nombre_repositorio: ${{ steps.capturar_ecr_nombre.outputs.ecr_nombre_repositorio }}
      instance_public_ip: ${{ steps.capturar_ip_ec2.outputs.instance_public_ip }}
      
    steps:
      # Este paso copia lo que hay en la rama main en la máquina virtual de Ubuntu
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"
          
      # Este paso es para instalar Terraform en la máquina virtual
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ./archivosTf
       
      - name: Plan Terraform
        run: terraform plan
        working-directory: ./archivosTf
  
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./archivosTf

      #subir archivos al bucket para luego pasarlos a los contenedores
      - name: Subir tfstate al bucket de S3
        run: aws s3 cp terraform.tfstate s3://${{ secrets.AWS_S3_BUCKET }}/ --region us-east-1 
        working-directory: ./archivosTf

      # Capturar los outputs de Terraform y hacerlos como outputs del job
      - name: Capturar output de Terraform (Bucket)
        id: capturar_bucket
        run: echo "bucket_nombre=$(terraform output -raw s3)" >> "$GITHUB_OUTPUT"
        working-directory: ./archivosTf

      - name: Capturar URI del repositorio ECR
        id: capturar_ecr_uri_url
        run: echo "ecr_repository_uri_url=$(terraform output -raw ecr_repository_uri_url)" >> "$GITHUB_OUTPUT"
        working-directory: ./archivosTf

      - name: Capturar nombre del repositorio ECR
        id: capturar_ecr_nombre
        run: echo "ecr_nombre_repositorio=$(terraform output -raw ecr_nombre_repositorio)" >> "$GITHUB_OUTPUT"
        working-directory: ./archivosTf 

      - name: Capturar ip de la EC2
        id: capturar_ip_ec2
        run: echo "instance_public_ip=$(terraform output -raw instance_public_ip)" >> "$GITHUB_OUTPUT"
        working-directory: ./archivosTf   

  crear-contenedor:
    runs-on: ubuntu-latest
    needs: despliegue
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1" 
    
      - name: Crear archivo private key
        run: |
          echo "${{ secrets.DEPLOYER_KEY }}" > deploy_key.pem
          chmod 600 deploy_key.pem

      - name: subir dockerfile y ldifs a la instancia
        run: |
          rsync -avz -e "ssh -i deploy_key.pem -o StrictHostKeyChecking=no" ./Dockerfile.LDAP ubuntu@${{ needs.despliegue.outputs.instance_public_ip }}:/home/ubuntu/    
          rsync -avz -e "ssh -i deploy_key.pem -o StrictHostKeyChecking=no" ./empleados.ldif ubuntu@${{ needs.despliegue.outputs.instance_public_ip }}:/home/ubuntu/
          rsync -avz -e "ssh -i deploy_key.pem -o StrictHostKeyChecking=no" ./usuario.ldif ubuntu@${{ needs.despliegue.outputs.instance_public_ip }}:/home/ubuntu/
          rsync -avz -e "ssh -i deploy_key.pem -o StrictHostKeyChecking=no" ./instalar-docker.sh ubuntu@${{ needs.despliegue.outputs.instance_public_ip }}:/home/ubuntu/
    
      - name: entrar en la instancia y logearme en aws
        run: |
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.despliegue.outputs.instance_public_ip }} << 'EOF'
            chmod +x /home/ubuntu/instalar-docker.sh
            /home/ubuntu/instalar-docker.sh
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ needs.despliegue.outputs.ecr_repository_uri_url }}
            docker build -t ldap-img -f ./Dockerfile.LDAP .
            docker run -d --network my-network --name ldap-container -p 636:636 -p 389:389 -e LDAP_ADMIN_PASSWORD="admin" ldap-img
            docker run -d --network my-network --name apache-container -p 443:443 -p 80:80 ${{ needs.despliegue.outputs.ecr_repository_uri_url }}:img-apache
          EOF
        #esto va dentro del EOF
        #sudo usermod -aG docker ubuntu
        #newgrp docker
        #sudo systemctl restart docker
        #docker network create my-network
        
      - name: Borrar archivo private key
        run: |
          rm -f deploy_key.pem
